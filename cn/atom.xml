<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wind.js]]></title>
  <link href="http://windjs.org/cn/atom.xml" rel="self"/>
  <link href="http://windjs.org/cn/"/>
  <updated>2012-08-14T21:46:36+08:00</updated>
  <id>http://windjs.org/cn/</id>
  <author>
    <name><![CDATA[老赵]]></name>
    <email><![CDATA[jeffz@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wind.js有奖征文第一期]]></title>
    <link href="http://windjs.org/cn/blog/2012/08/first-solicit-article-with-award/"/>
    <updated>2012-08-13T22:41:00+08:00</updated>
    <id>http://windjs.org/cn/blog/2012/08/first-solicit-article-with-award</id>
    <content type="html"><![CDATA[<h2>缘起</h2>

<p>作为一个开源项目，社区群众的参与必不可少，Wind.js在这方面做的十分不足。项目发展至今，从代码到所有的文档材料，几乎都是由我一个人完成的。我已经在文档上花费了很大心力，但依然只能写一些最基本的内容，大部分的思考依然只存在与脑海中，这让我倍感无力。而且作为项目的开发者，我也希望可以从更多角度来了解使用者眼中的Wind.js。我知道整个项目的细枝末节，但有些时候我眼里顺理成章的事情，似乎在别人看来并非那么自然。</p>

<p>出于多方面考虑，我决定发起一次有奖征文活动，希望可以借助此次活动加强Wind.js的群众基础，并让互联网上出现更多有关Wind.js的资料，其中优秀的内容也会有机会进入Wind.js官方文档。</p>

<!-- more -->


<h2>活动规则</h2>

<p>本次征文活动诚邀Wind.js新老用户参与，要求如下：</p>

<ul>
<li>载体不限：通过个人博客，或是其他能够在互联网上长期访问的载体发布内容。</li>
<li>内容不限：可以是入门教程、使用心得、案例介绍、源码评析、意见建议等各类相关内容。</li>
<li>形式不限：尽管是“征文”，但除文章之外亦可使用PPT等各类文案形式。</li>
<li>数量不限：一人可以在截止日期前提交多份文章。</li>
</ul>


<p>活动从今天开始，至9月30日结束。完成后请将地址回复于此，亦可通过微博<a href="http://weibo.com/jeffz/">@老赵</a>，所有提交的文章将列于文末。如果您在创作过程中遇到任何疑问，或想要了解任何关于Wind.js的内容，请加入<a href="https://groups.google.com/d/forum/windjs">Wind.js讨论组</a>，或直接<a href="mailto:windjs@googlegroups.com">发送邮件</a>提问或参与讨论。</p>

<h2>评奖方式及奖品</h2>

<p>本次活动会邀请业界专家（3到5名），普通群众，以及我本人共同参与投票计分：</p>

<ul>
<li>本人：三票，每票10分。</li>
<li>专家：每人三票，每票5分。</li>
<li>群众：每人三票，每票1分。</li>
</ul>


<p>本次活动将设三个级别的奖项：</p>

<ul>
<li>一等奖1名，奖品为价值50元的亚马逊代金券3张。</li>
<li>二等讲2名，奖品为价值50元的亚马逊代金券2张。</li>
<li>三等奖5名，奖品为价值50元的亚马逊代金券1张。</li>
</ul>


<p>本次活动奖品由“<a href="http://windjs.org/cn/fund/">Wind.js基金</a>”赞助。奖品亦可换成价格相近的礼品，获奖者可自由决定。</p>

<h2>已提交的内容</h2>

<ul>
<li><a href="http://weibo.com/lambsand">@金氧</a>：<a href="http://jinyang.mynah.org/article/dispel-your-windjs%27s-doubts.html">消除你对Wind.js的疑虑</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wind.js 0.7.0版本正式发布]]></title>
    <link href="http://windjs.org/cn/blog/2012/08/windjs-0.7.0-released/"/>
    <updated>2012-08-12T23:05:00+08:00</updated>
    <id>http://windjs.org/cn/blog/2012/08/windjs-0.7.0-released</id>
    <content type="html"><![CDATA[<p>经过<a href="https://github.com/JeffreyZhao/wind/issues?milestone=5&amp;page=1&amp;sort=updated&amp;state=closed">周末整整两天的努力</a>，Wind.js 0.7.0版本终于正式发布了！这次发布最重要的改进，便是类库的名称从Jscex修改为Wind.js，搭建了博客，并启用了新的网站和域名。此外，还修复了一些Bug，添加了更多的单元测试，并吸取了一部分<a href="https://github.com/JeffreyZhao/wind/issues/51">玉伯的建议</a>简化了项目的使用方式。</p>

<!-- more -->


<h2>关于jscex.org域名</h2>

<p>之前Jscex项目使用的是jscex.info作为官方网站。上周玉伯为Jscex提出了一些建议，提到应该尽量使用org域名，这是开源项目的标配。其实我也想，只可惜jscex.org域名已经被他人所有。不过经玉伯这么一提起，我就打算试着去买回jscex.org域名。我尝试在<a href="http://www.sedo.com/">Sedo</a>上向jscex.org的所有者提出了购买申请。</p>

<p>我开价100美金。其实按我最初的想法，Jscex这个名称除了我这个项目之外，应该无人在意才对，应该不该花多少钱。没想到的是对方很快就有所回应，要价1000美金。于是我逐步加到200美金，但对方死咬住800美金不松口，我只得取消交易。有趣的是，过了不久我收到对方的邮件，把价格降低到679美金，最后又提出了479美金的“超低价”。他在邮件里的说法是：</p>

<blockquote><p><strong>$479</strong> This is last chance.</p></blockquote>

<p>这顿时让我有了一丝特别的感觉。因为对于一个英语国家的人，他一定会说“This is <strong>the</strong> last chance”，这里加上一个定冠词“the”才显得十分自然。之前我在微博上也提到我为jscex.org准备了500美金的预算，而此时我也已经放弃购买域名，并开始在微博上征集项目的新名字，但价格却突然降低至我的预算范围内。再加上那时已经是下午，但邮件回复依然十分迅速，除了说明对方与我的工作时区接近之外，似乎对方也非常想卖出这个域名。</p>

<p>同时，根据<a href="http://www.whois.net/whois/jscex.org">Whois上查询的结果</a>，这个域名直到去年10月才被注册，那时候Jscex项目已经对外公开了相当长的时间，所以我认为这是在故意抢注想敲我一笔的可能性很大。这样更坚定了我项目改名的决心。</p>

<p>当然，Jscex这个名字本身也存在难读难记等问题。可以这么认为：jscex.org域名被抢注是导致项目改名的“最后一根稻草”。</p>

<h2>新名字Wind.js</h2>

<p>对于新名字我始终把握不定。一开始我考虑到Jscex的读音是“J-Sex”，这导致我也曾经以“性感的JavaScript”来宣传Jscex类库，因此顺水推舟改名为SexJS或是SexyJS似乎也是件挺有趣的事情。但是后来我感觉这名字似乎过于哗众取宠，容易引起反感，于是作罢。</p>

<p>由于Jscex是一个流程控制（Flow Control）类库，因此我一直想围绕Flow这个词做文章。后来想到过Flowless这个名字，但是在注册了flowless.org域名之后，却悲催地发现<a href="http://npmjs.org/package/flowless">NPM上已经有了同名的类库</a>。后来也考虑过FancyFlow，Wonderflow，又从Flow联想到水流和气流，继而注册了WaterJS.org，AirJS.org，AirflowJS.org等域名，还有比较“通用”的MagicJS.org等等，但最终决定使用WindJS.org作为域名，项目名便取做Wind.js。假如您需要以上这些域名干些正事，请随时跟我联系，我可以免费转让给您。</p>

<p>从Flow联想到Wind自然不必解释，选择Wind.js的一个重要原因，便是它似乎还较为容易搜索出来。我曾经也考虑过Air.js，但是发现已经有了Adobe Air这个与JavaScript关系相对较为紧密的东西，再取名叫做Air.js就会稍显不利。而Wind.js除了识别度较高之外，也显得比Air更有气势一些，四个字符看上去也长短适中。从周四晚确定了Wind.js到现在，我对这个名字的满意度越来越高。</p>

<p>我甚至连Logo都已经想好了：就画上一阵风，吹得<code>callback</code>及<code>state</code>这种东西团团转吧！</p>

<h2>Wind.js 0.7.0版本的改进</h2>

<p>既然项目名称从Jscex修改为Wind，因此原本的根对象名也自然从<code>Jscex</code>变成了<code>Wind</code>。除了改名之外，Wind.js 0.7.0还在使用上做了部分简化，这主要是采纳了玉伯的建议。</p>

<p>首先，我减少了Wind.js中模块的数量。JavaScript语言缺少一个统一模块机制，因此传统开发过程中的“模块化”实践会引起使用上的不便，这是一个相当严重的副作用。于是在Wind.js 0.7.0中：</p>

<ul>
<li>jscex-parser和jscex-jit合并为wind-compiler模块，因为对用户来说几乎没有独立使用解析器模块的需求。</li>
<li>jscex-async和jscex-async-powerpack合并为wind-async模块，因为考虑到异步增强模块本身也只有很小的体积，还不如并入异步模块来换取易用性。</li>
</ul>


<p>此外，jscex模块也改名为wind-core，突出其“核心”模块的本质。于是，原本使用Jscex 0.6.5异步模块时需要引入6个模块：</p>

<pre><code>&lt;script src="jscex-x.y.z.js"&gt;&lt;/script&gt;
&lt;script src="jscex-parser-x.y.z.js"&gt;&lt;/script&gt;
&lt;script src="jscex-jit-x.y.z.js"&gt;&lt;/script&gt;
&lt;script src="jscex-builderbase-x.y.z.js"&gt;&lt;/script&gt;
&lt;script src="jscex-async-x.y.z.js"&gt;&lt;/script&gt;
&lt;script src="jscex-async-powerpack-x.y.z.js"&gt;&lt;/script&gt;
</code></pre>

<p>到了Wind.js 0.7.0中则只需引入4个模块即可：</p>

<pre><code>&lt;script src="wind-core-x.y.z.js"&gt;&lt;/script&gt;
&lt;script src="wind-compiler-x.y.z.js"&gt;&lt;/script&gt;
&lt;script src="wind-builderbase-x.y.z.js"&gt;&lt;/script&gt;
&lt;script src="wind-async-x.y.z.js"&gt;&lt;/script&gt;
</code></pre>

<p>而对于Node.js环境中，使用Wind.js更只需安装一个包即可：</p>

<pre><code>npm install wind
</code></pre>

<p>在使用时也只需<code>require</code>一个包即可：</p>

<pre><code>var Wind = require("wind");
</code></pre>

<p>本来“模块化”的目标，是为了在浏览器中有选择性地使用模块以减小脚本加载体积。然而，对于Node.js来说包的体积完全不是问题，还不如直接发布一个包含了所有模块的大包，让开发人员可以毫不费力地使用Wind.js的所有功能。</p>

<h2>新的项目官方站点</h2>

<p>您肯定也已经发现Wind.js新上线官方站点。这个站点使用<a href="http://octopress.org/">Octopress</a>搭建，比旧站点使用的<a href="https://github.com/bevry/docpad">DocPad</a>强大许多。更重要的是，它自带了一个至少在我看来十分美观的皮肤，我将其简单的本地化之后便可以直接用上了，甚至它还附赠一个博客系统，支持使用<a href="http://disqus.com/">Disqus</a>发表评论。这样Wind.js便有了自己的项目博客，发布新闻或是搞各种活动便无需借助<a href="http://blog.zhaojie.me/">我的个人博客</a>，一切都显得正式了许多。</p>

<p>今天我一整天都在进行文案工作，重写<a href="http://windjs.org/cn/docs/">文档首页</a>，并迁移了完整的<a href="http://windjs.org/cn/docs/async/">异步模块代码</a>，将之前的一大篇文档分拆了几个小部分，希望能够进一步方便阅读。</p>

<h2>反馈</h2>

<p>假如您在Wind.js使用过程中产生任何疑问或是意见建议，请加入<a href="https://groups.google.com/d/forum/windjs">Wind.js讨论组</a>参与讨论，或直接发送邮件至<a href="mailto:windjs@googlegroups.com">邮件列表</a>。对于使用过程中发现的Bug，也可以<a href="https://github.com/JeffreyZhao/wind/issues">汇报至GitHub</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[专访Wind.js作者老赵（上）：缘由、思路及发展]]></title>
    <link href="http://windjs.org/cn/blog/2012/07/infoq-interview-windjs-author-1/"/>
    <updated>2012-07-28T22:01:00+08:00</updated>
    <id>http://windjs.org/cn/blog/2012/07/infoq-interview-windjs-author-1</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p><a href="http://windjs.org/cn/" title="Wind.js官方网站">Wind.js</a>是很有特点的一个JavaScript异步编程类库（其前身为Jscex），最近作者不但发布了其眼中的里程碑版（v0.6.5），还在“<a href="http://ouropensource.51qiangzuo.com/">我们的开源项目</a>”系列活动和“<a href="http://adc.taobao.com/carnival/">阿里技术嘉年华</a>”上连续露脸，获得广泛关注。Wind.js的作者<a href="http://blog.zhaojie.me/">赵劼</a>就在本站担任编辑，InfoQ自然抓住机会对老赵做了正式的书面采访。采访篇幅较长，将分上下集播出。老赵将在上篇中借机倾述他对于库设计的思考和心得。</p>

<p>注：<a href="http://www.infoq.com/cn/articles/interview-jscex-author-part-1">本文首发于InfoQ</a>，出于阅读体验等方面考虑，现在重新发于博客。</p>

<!-- more -->


<p><strong>Q：能否先介绍一下你自己？</strong></p>

<p>大家好，我是赵劼，在网上一般叫做老赵或者赵姐夫，经常沉迷于代码世界里，关注技术发展或是程序员的成长等话题，而不太愿意接触如今比较“流行”的产品设计，项目管理，产业分析等等，连所谓的“大规模应用架构设计”都不太关心——甚至还略有抵触，所以我可以说是个纯码农。之前呆过外企，呆过民企，创过业，也呆过国内的互联网企业，现在则是在做外资银行的内部系统，可以说是一块没有接触过的领域，痛并快乐着。</p>

<p>在工作之余，我也会十分热衷于在业余时间编写自己的开源​作品，其中Wind.js便是迄今为止我最为投入（没有之一）的项目。当然技术之外，我也喜欢烧烧菜，弹弹琴——别看我一副十足的码农范，但我也是从小学琴，标准琴童出身呢。</p>

<p><strong>Q：是什么促使你开发Wind.js这个异步编程类库的呢？</strong></p>

<p>应该说是需求与兴趣的共同驱使吧。</p>

<p>首先，随着Web平台地位的提升，霸占着浏览器的JavaScript语言也成为了世界上最流行的语言之一，甚至通过<a href="http://nodejs.org/" title="Node.js">Node.js</a>进入了服务器编程领域。JavaScript的一个重要特性便是“不能阻塞”，这里的“不能”是指“不应该”而不是“无法”的意思（只要提供阻塞的API）。JavaScript是一门单线程语言，因此一旦有某个API阻塞了当前线程，就相当于阻塞了整个程序，所以“异步”在JavaScript编程中占有很重要的地位。异步编程对程序执行效果的好处这里就不多谈了，但是异步编程对于开发者来说十分麻烦，它会将程序逻辑拆分地支离破碎，语义完全丢失。因此，许多程序员都在打造一些异步编程模型已经相关的API来简化异步编程工作，例如Promise模型。而我开发Wind.js，其实也是出于这个目的，只不过使用的方式有些特别，效果更好。</p>

<p>其次，我本身一直是个编程语言爱好者，对这方面的关注经常不被人理解，被鄙视也不是一次两次了。Wind.js主要受到了F#的启发，F#是微软为.NET平台创建的一门函数式编程语言，以OCaml为基础，并加入了一些前沿的编程语言研究成果。其中很重要的一个特性便是“计算表达式”，它对于异步编程的支持令人眼前一亮。Wind.js的前身是Jscex，即JavaScript Computation EXpressions的缩写，它是F#中“<a href="http://msdn.microsoft.com/en-us/library/dd233182.aspx" title="F#计算表达式">计算表达式</a>”特性在JavaScript编程语言上的体现，因此理论上说它不仅仅只有“异步编程”，但简化异步编程的确是它最重要的一部分功能，没有之一。</p>

<p>这么看来，我为JavaScript本身引入其他语言的异步编程特性也是顺理成章的事情吧。</p>

<p><strong>Q：正如你所说的那样，在简化JavaScript异步编程这个事情上其实已经有很多不同的方案（例如Promise等异步模型），那么你觉得这些现成的方案都有哪些不足之处，Wind.js是否有“重新发明轮子”的意味在里面呢？</strong></p>

<p>作为一个异步流程控制类库，Wind.js的唯一目的便是“改善编程体验”，这跟其他大大小小异步流程控制方案有着相同的目标——但是，改善的“程度”以及改善的“方式”便是Wind.js与它们最大的区别。</p>

<p>在传统的异步流程控制类库中，人们普遍使用构建各类API的方式来辅助异步逻辑编写。例如著名的<a href="https://github.com/creationix/step/" title="Step类库">Step</a>类库为了解决异步操作顺序执行的问题，便引入了一个<code>Step</code>方法：</p>

<pre><code>Step(
    function readFile() {
        fs.readFile(filename, this);
    },
    function capitalize(err, text) {
        if (err) throw err;
        return text.toUpperCase();
    },
    function writeBack(err, newText) {
        if (err) throw err;
        fs.writeFile(filename, newText, this);
    },
    function complete(err) {
        if (err) throw err;
        console.log("complete");
    }
);
</code></pre>

<p>在Step类库里，假如要将几个系统串联，则可以依次将多个函数顺序提供给<code>Step</code>方法，每个函数内部使用自身的<code>this</code>作为回调，或直接返回一个结果。那么这里就有一个问题，例如在一个面向对象开发的系统中，它们对<code>this</code>有着严格的依赖关系，而Step则强制使用<code>this</code>保存回调函数，那又该如何协调两者之间的矛盾？当然，对于一个有经验的JavaScript开发人员来说，解决这点自然不是问题，但始终需要“绕”，即便不影响功能，也会影响编程风格（模式）——由于类库的需要而不得不引入的编程风格（模式）。</p>

<p>串行如此，那么并行呢？Step又引入了<code>parallel</code>函数来实现这方面需求，换句话说，每增加一类需求，我们则往往需要增加一个甚至一套API。Step提供了“串行”、“并行”、以及“分组”三类执行方式，而功能更为丰富的<a href="https://github.com/caolan/async/" title="Async类库">Async</a>类库则提供了十几种异步流程控制或是数据处理的辅助方法。</p>

<p>这就产生了矛盾：更强大的类库，则往往意味着更多的API，以及更多的学习时间，这样开发者才能根据自身需求选择最合适的方法。那么，多少API才能够满足广大人民群众的需求呢？这其实很难界定，根据80/20法则，80%的用户只需要20%的功能，但其实不同的用户群体需要的那20%可能各不相同，这几乎意味着一个类库为了满足各种多变的需求，则需要提供100%的功能，让不同的用户各取自身所需的20%功能。而事实上，由于人们总是能够不断地挖掘出新的需求，因此我们时不时需要设计并实现新的API。同时，为了保证现有代码的兼容性，旧的API也必须保留下来，于是类库的规模往往会不断扩大。</p>

<p>此外，API的粒度也是一个课题。粒度越大的API往往功能越强，可以通过少量的调用完成大量工作，但粒度大往往意味着难以复用。越细粒度的API灵活度往往越高，可以通过有限的API组合出足够的灵活性，但组合是需要付出“表现力”作为成本的。JavaScript在表现力方面有一些硬伤，即所谓“<a href="syntactic-noise">语法噪音</a>”，例如定义函数所用的<code>function</code>关键字和大括号，函数返回值必须使用的<code>return</code>关键字等等，其实都限制JavaScript在某些场景下的表达能力，例如在<a href="http://coffeescript.org/" title="CoffeeScript语言">CoffeeScript</a>中的匿名函数<code>(x) -&gt; x + 1</code>，使用JavaScript就必须写为<code>function (x) { return x + 1; }</code>。我们的确可以在JavaScript中设计出一套足够灵活，可以组合出各种流程的异步API，我也做过这方面的尝试，但最终会发现，这样设计出来的API始终无法清晰地表达出流程的真正意图。</p>

<p>总之，对于传统类库来说，在如何界定类库的“边界”，如何确定API的粒度等方面，都需要做出大量的权衡。所谓“权衡”便是通过牺牲一部分的利益来换取更大的收获，但可能在满足80%的需求的时候，剩余20%的用户只能无奈地离开了。</p>

<p>Wind.js的确是个“轮子”，但绝对不是“重新发明”的轮子。我不会掩饰对Wind.js的“自夸”：Wind.js在JavaScript异步编程领域绝对是一个创新，可谓前无来者。有朋友就评价说“在看到Wind.js之前，真以为这是不可能实现的”，因为Wind.js事实上是用类库的形式“修补”了JavaScript语言，也正是这个原因，才能让JavaScript异步编程体验获得质的飞跃。</p>

<p><strong>Q：你一直强调Wind.js完全就是JavaScript的编程，包括“编程体验”，为什么特别纠结这一点？你为Wind.js选择了比较特别的实现方式，也跟这个思路有关吗？这种实现方式的优势在哪里？</strong></p>

<p>我们现在想要解决的是“流程控制”问题，那么说起在JavaScript中进行流程控制，有什么能比JavaScript语言本身更为现成的解决方案呢？在我看来，<strong>流程控制并非是一个理应使用类库来解决的问题，它应该是语言的职责</strong>。只不过在某些时候，我们无法使用语言来表达逻辑或是控制流程，于是退而求其次地使用“类库”来解决这方面的问题。</p>

<p>这方面我可以举一个例子，且看这段简单的代码：</p>

<pre><code>for (var i = -5; i &lt; 5; i++) {
    if (i &lt; 0) {
        console.log(i + "是负数");
    } else {
        console.log(i + "是正整数");
    }
}
</code></pre>

<p>但其实，只要我们提供了合适的<code>_for</code>及<code>_if</code>函数（附1），我们完全可以不用<code>for</code>及<code>if</code>关键字来实现相同的功能：</p>

<pre><code>_for (-5, 5, function (i) {
    _if (
        // 条件
        i &lt; 0,
        // 满足条件的分支
        function () {
            console.log(i + "是负数");
        },
        // else分支
        function () {
            console.log(i + "是正整数");
        });
});
</code></pre>

<p>其实只要是有一定函数式编程能力（主要是匿名函数）的语言，都可以在一定程度上通过这种形式的类库实现流程控制，只不过因为语言特性不同，各有美丑而已。不得不说，JavaScript虽然有着还算不错的函数式编程特性，但由于之前提到的硬伤，几乎无法优雅地完成这项任务。</p>

<p>事实上，上面演示的<code>_for</code>方法的灵活程度与<code>for</code>语句还有很大差距，例如，您不妨尝试下如何使用类库实现如下的<code>for</code>循环：</p>

<pre><code>var iter = getIterator();
for (var i = 0; iter.current &lt; i++; iter.moveNext()) {
    ...
}
</code></pre>

<p>这会直接导致我们的<code>_for</code>函数必须接受更多的匿名函数，“享受”更多JavaScript语言的硬伤。</p>

<p>我想说的是，即便我们“有能力”用类库实现类似的效果，但真会有人去这么做吗？使用JavaScript语言本身提供的特性进行流程控制，对于JavaScript开发人员来说，是一件天经地义，顺理成章的事情。JavaScript语言已经提供了开发人员控制流程所需的全部关键字，而且开发人员已经无数次证明了这些关键字是多么的灵活与优雅。假如，我们这里先说“假如”——假如我们可以使用传统的JavaScript语言编写异步代码，使用JavaScript来控制流程，表达逻辑，那么我们就可以避免学习大量新的API，避免遭受JavaScript中的语法噪音，我们只需编写简单而熟悉的JavaScript代码即可。</p>

<p>在软件开发行业有一句很著名的话：<a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" title="Leaky Abstractions">Every abstraction is leaky</a>，换句话说，任何一种抽象都是有缺陷的。事实上，各种异步编程模型都是种抽象，它们是为了实现一些常用的异步编程模式而设计出来的一套有针对性的API。但是，在实际使用过程中我们可能遇到千变万化的问题，一旦遇到模型没有“正面应对”的场景，或是触及这种模型的限制（如Step的<code>this</code>回调），开发人员往往就只能使用一些相对较为丑陋的方式来“回避问题”。Wind.js也是一种抽象，因此也不可避免的出现leaky，但Wind.js的设计思路便是将这种抽象构建为JavaScript本身。换句话说，Wind.js的能力在很大程度上是受限于JavaScript语言的表达能力，而传统异步编程类库则是受限于自身设计的API的表达能力。哪种做法可以应对更大范围的场景，我相信应该已经不言而喻了。</p>

<p>所以Wind.js选择的是这么一种方式：开发人员使用最普通不过的JavaScript来表达一段逻辑，只不过通过某种方式来指定某一个环节是“异步操作”，代码执行流程会在这里“暂停”，等待该异步操作结束，然后再继续执行后续代码。如果这个操作失败，则相当于抛出了一个异常，会被<code>catch</code>语句捕获。一段类似的代码可以是这样的：</p>

<pre><code>try {
    var content = $await(read(src, content));
    console.log("内容读取成功");
    $await(write(target, content));
    console.log("内容写入成功");
} catch (ex) {
    $await(submitError(ex));
    console.log("错误提交成功");
}
</code></pre>

<p>在这段代码里，我们用<code>$await(&lt;task&gt;)</code>标记一个异步操作，代码流程会在此处“等待”异步操作完成，在<code>catch</code>分支中也一样。我想，任何一个普通的JavaScript程序员都能顺利理解这段代码的含义。至于性能，自然必须和使用传统回调风格写出来的程序完全一致，这里的“等待”并不是“阻塞”，而会空出执行线程，直至操作完成。而且，假如系统本身没有提供阻塞的API，我们甚至没有“阻塞”代码的方法（当然，本就不该阻塞）。</p>

<p>当然，单纯依靠JavaScript语言本身显然无法获得这样的能力，JavaScript的执行流程不会随便地暂停，因此我们需要对代码进行<strong>自动改写</strong>。这便是Wind.js的工作原理，值得注意的是“自动”二字，换句话说开发者编写代码的时候完全不需要额外的“改写”步骤，这个功能在Wind.js中叫做“<a href="http://en.wikipedia.org/wiki/Just-in-time_compilation" title="JIT编译">JIT（Just in Time）编译</a>”，也就是在程序的执行过程中动态生成并执行新的代码。</p>

<p>Wind.js自动改写的最小单位是“函数”，传统JavaScript函数是这样定义的：</p>

<pre><code>var func = function () {
    // 函数体
};
</code></pre>

<p>而Wind.js函数是这样定义的：</p>

<pre><code>var windFunc = eval(Wind.compile("async",
    function () {
        // Wind.js函数体
    }
));
</code></pre>

<p>可见，在Wind.js在使用形式上和一个普通类库毫无二致，这便保证了它与JavaScript有着相同的编程体验。传统如CoffeeScript或是<a href="http://www.dartlang.org/" title="Dart语言">Dart</a>等以JavaScript作为目标语言的“新语言”，都必须引入一个额外的编译步骤。我反复强调，使用Wind.js进行开发与普通的JavaScript编程几乎没有任何区别。至于外围的“架子代码”，我们完全可以不关心其特别含义，作为代码片段加入编辑工具，敲一个快捷键便能直接输出。</p>

<p>在Wind.js函数中，我们就可以使用唯一的语言扩展：“绑定”操作，这可以简单理解为那个异步的<code>$await</code>操作。可以看到，这个特殊操作使用了JavaScript的“函数调用”语义，同样符合JavaScript的编程实践。有些朋友建议把<code>$await</code>改成关键字形式，而不是函数调用。可惜，这么做首先会被JavaScript运行环境拒之门外，导致无法实现JIT编译器，其次也有可能会破坏一些相关的事物，例如开发工具里的代码着色，甚至某些高级IDE中的语法提示，因为语法提示功能需要先对代码语义进行完整的分析。因此，保证Wind.js与JavaScript绝对一致，其实也是在保证Wind.js能够完美融入整个JavaScript生态环境。</p>

<p>不仅是语法设计上如此，Wind.js自带的类库设计也充分借助了JavaScript的语义实现。例如Wind.js的异步任务模型支持取消操作，要将一个任务置为“取消”状态，只需抛出一个未经捕获的<code>CanceledError</code>错误即可，例如：</p>

<pre><code>var t1 = eval(Wind.compile("async", function () {
    $await(t2());
}));

var t2 = eval(Wind.compile("async", function () {
    $await(t3());
}));

var t3 = eval(Wind.compile("async", function () {
    throw new CanceledError();
}));
</code></pre>

<p>根据JavaScript的语义，一个未捕获的异常会顺着调用链不断抛出，导致一系列的异步任务都会进入“取消”状态。这是一个统一而简单的取消模型。</p>

<p><strong>Q：Wind.js原来的版本API极其简单，可以说只有一个$await。发展到现在，Wind.js增加了一些扩展，比如针对Node.js、WinRT的扩展，还有编程模型方面的扩展，像seq、agent这些。这些扩展是否说明Wind.js的应用场景超出你原来的预想？Wind.js的surface API和语法有没有因为这些扩展而变得复杂呢？</strong></p>

<p>说实话，Wind.js目前还处于“叫好不叫座”的推广期，并没有收到太多额外的用户需求，所有的组件与都是由我设计并实现的，所以当然都在我预想之内啦！</p>

<p>其实你说的这些概念都不是同一个层面上的东西，它们可以分两大类，一是用于不同目的的“构造器”：</p>

<ul>
<li><a href="http://windjs.org/cn/docs/async/" title="Wind.js 异步模块">异步</a>：即<code>async</code>构造器，用于简化异步开发，基于Wind.js自带的异步任务模型。</li>
<li>迭代：即<code>seq</code>构造器，用于生成一个延迟计算的迭代器。</li>
<li><a href="http://windjs.org/cn/docs/promise/" title="Wind.js Promise模块">Promise</a>：即<code>promise</code>构造器，用于支持基于Promise/A模型的异步开发。</li>
</ul>


<p>“构造器”和“编译器”是Wind.js的两大支柱。Wind.js编译器在转化一个普通的JavaScript函数的时候永远使用相同的模式，但配合不同的“构造器”便能得到不同的效果。例如<code>seq</code>构造器可以用来创建一个无限长的迭代器：</p>

<pre><code>var infinite = eval(Wind.compile("seq", function (start) {
    while (true) {
        $yield(start++);
    }
}));

var fib = eval(Wind.compile("seq", function () {
    $yield(0);
    $yield(1);

    var a = 0, current = 1;
    while (true) {
        var b = a;
        a = current;
        current = a + b;

        $yield(current);
    }
}));
</code></pre>

<p>不同的构造器中的“绑定”操作不同，其含义也不一样。例如在<code>seq</code>构造器中的绑定操作为<code>$yield</code>，表示输出迭代器里的一个对象，并将控制权交由外部，直到下次调用<code>moveNext</code>方法时才继续执行。因此，虽然上述两个方法都是会输出“无限长”的序列，但什么时候取元素，取多少元素完全由使用者控制，即所谓“延迟计算”，“按需计算”。</p>

<p>两个迭代器还能够组合使用，例如：</p>

<pre><code>fib() // 无限长的菲波纳契数列
    .filter(function (n) { return n % 2 == 0; }) // 取其中所有的偶数
    .skip(2) // 跳开前2个数
    .take(5) // 取5个数
    .zip(infinite(1)) // 和从1开始的无限长序列组合
    .map(function (a) { return a[1] + ": " + a[0]; }) // 将每个组合拼接成字符串
    .each(print); // 并打印出来
</code></pre>

<p>即便是无穷序列，但由于我们使用了<code>take(5)</code>操作，最终也只会打印出五项，而不会成为死循环。这类“组合”操作便是“增强类库”的功劳。面向异步编程的<code>async</code>构造器也有相关的增强类库，它扩展了<code>async</code>构造器所使用的异步任务模型，例如并发相关的辅助函数。此外还有一些常用的异步操作（如封装了<code>setTimeout</code>的<code>sleep</code>方法），并简化了与其他一些常见异步编程模型的协作。你所提到的Node.js以及agent扩展都是类似的“类库”，前者自不必说，后者则是一个Erlang中Actor模型的尝试实现，基于Wind.js的异步编程支持。</p>

<p>不过你提到的WinRT扩展就不同了，它其实便是<code>promise</code>构造器，是为了直接支持使用<a href="http://wiki.commonjs.org/wiki/Promises/A" title="Promise/A模型">Promise/A</a>异步模型的开发环境。Promise/A现在是CommonJS的草案之一，提出了一种Promise模型的设计及API表现。虽说它离“标准”还有很长一段距离，但其实很多类库都已经实现了这个规范了，例如著名的<a href="http://api.jquery.com/promise/" title="jQuery中的Promise模型">jQuery</a>，<a href="http://github.com/kriszyp/node-promise" title="node-promise类库">node-promise</a>，还有用来编写Win8中Metro应用（即WinRT）的HTML5开发平台。当然严格来说，它们都是基于Promise/A规范的一套“扩展实现”，但既然有了共有的子集，那事情就已经好办多了。</p>

<p>之前在一个QQ群上某同学建议我提供一个类似于<code>fromStandard</code>（用于将标准的回调异步方法适配为Wind.js异步模型）一样的<code>fromPromise</code>辅助方法。这当然没问题，其实很简单，接下来也会做，但Wind.js考虑得更多，例如：</p>

<ol>
<li>为什么需要<code>fromPromise</code>辅助方法？因为用户使用了Promise异步模型，而希望Wind.js提供更好的辅助环境。</li>
<li>为什么对方不使用Wind.js自带的异步任务模型？因为用户可能已经有部分代码采用了Promise模型。</li>
<li>为什么它要使用Promise这种已经较为成熟且复杂的异步模型？因为用户可能已经有了一个围绕着Promise模型开发的应用程序，甚至是一个已经拥有大量辅助方法支持的应用开发框架（例如WinRT）。</li>
</ol>


<p>因此，这种情况下如何还需要再结合Wind.js的异步任务模型，则需要来回转换，显得略为冗余——不如就让Wind.js对Promise/A异步模型直接提供支持吧！换句话说，要让<code>$await</code>操作接受一个Promise对象而不是一个Wind.js异步任务对象，同时一个使用<code>promise</code>构造器生成的Wind.js异步方法也会直接返回一个Promise/A对象。于是我们在WinRT中便可以编写这样的代码：</p>

<pre><code>WinJS.Namespace.define("MyApp", {
    showPhoto: eval(Wind.compile("promise", function () {
        var dlg = new MessageDialog("Do you want to open a file?");
        dlg.commands.push(new UICommand("Yes", null, "Yes"));
        dlg.commands.push(new UICommand("No", null, "No"));

        // 显示对话框，并等待用户选择Yes或No
        var result = $await(dlg.showAsync());

        if (result.id == "Yes") {
            var picker = new FileOpenPicker();
            picker.viewMode = PickerViewMode.thumbnail;
            picker.suggestedStartLocation = PickerLocationId.picturesLibrary;
            picker.fileTypeFilter.push(".jpg");

            // 显示文件选择器，并等待用户选择文件
            var file = $await(picker.pickSingleFileAsync());

            if (file != null) {
                $("#myImg").src = URL.createObjectURL(file);
            }
        }
    }))
});
</code></pre>

<p>此时我们可以一视同仁地对待showPhoto方法以及WinRT中标准的异步操作，甚至可以把它传入WinRT的系统方法配合使用，因为它完全符合WinRT标准。值得一提地是，创建<code>promise</code>构造器只需花费30余行代码（包括空行及函数定义）。从这个例子中可以看出，在需要的情况下，我们完全可以轻松地让Wind.js融入任何异步模型。</p>

<p>一开始我就提到，Wind.js其实是受到F#计算表达式的启发而诞生的JavaScript类库，这些所谓的“变化”和“扩展”实际上都没有逃离计算表达式及其基础理论<a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)" title="Monad (Wikipedia)">Monad</a>的范畴。Wind.js从诞生开始便一直差不多是现在这样的使用方式，只是其内部实现在不断完善而已。不过我目前的精力完全放在了异步编程上，因此如<code>seq</code>构造器或是agent扩展都还处于孵化阶段，虽然它们几乎是我还在验证Wind.js可行性的阶段时开发的。</p>

<h2>附1</h2>

<p>我们可以这样实现<code>_for</code>及<code>_if</code>函数：</p>

<pre><code>var _for = function (begin, end, body) {
    for (var i = begin; i &lt; end; i++) {
        body(i);
    }
};

var _if = function (condition, bodyPart, elsePart) {
    if (condition) {
        bodyPart();
    } else {
        elsePart();
    }
};
</code></pre>

<h2>参考</h2>

<p>Wind.js相关：</p>

<ul>
<li><a href="http://windjs.org/cn/" title="Wind.js官方网站">网站</a></li>
<li><a href="https://github.com/JeffreyZhao/wind" title="Wind.js源码">源码</a></li>
<li><a href="http://windjs.org/cn/docs/" title="Wind.js文档">文档</a>

<ul>
<li><a href="http://windjs.org/cn/docs/compiler/" title="Wind.js编译器模块">编译器模块</a></li>
<li><a href="http://windjs.org/cn/docs/async/" title="Wind.js 异步模块">异步模块</a></li>
<li><a href="http://windjs.org/cn/docs/promise/" title="Wind.js Promise模块">Promise模块</a></li>
</ul>
</li>
</ul>


<p>项目：</p>

<ul>
<li><a href="https://github.com/creationix/step/" title="Step类库">Step</a></li>
<li><a href="https://github.com/caolan/async/" title="Async类库">Async</a></li>
<li><a href="http://coffeescript.org/" title="CoffeeScript语言">CoffeeScript</a></li>
<li><a href="http://www.dartlang.org/" title="Dart语言">Dart</a></li>
</ul>


<p>Promise模型：</p>

<ul>
<li><a href="http://wiki.commonjs.org/wiki/Promises/A" title="Promise/A模型">Promise/A规范</a></li>
<li><a href="http://github.com/kriszyp/node-promise" title="node-promise类库">node-promise</a></li>
<li><a href="http://api.jquery.com/promise/" title="jQuery中的Promise模型">jQuery中的Promise</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211867.aspx" title="WinRT中的Promise模型">Win8 Metro开发中的Promise</a></li>
</ul>


<p>其他：</p>

<ul>
<li><a href="fsharp-computation-expressions">F#计算表达式</a></li>
<li><a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)" title="Monad (Wikipedia)">Monad</a></li>
<li><a href="http://martinfowler.com/bliki/SyntacticNoise.html" title="语法噪音">语法噪音</a></li>
<li><a href="http://en.wikipedia.org/wiki/Just-in-time_compilation" title="JIT编译">JIT编译</a></li>
<li><a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" title="Leaky Abstractions">抽象泄露定律</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
